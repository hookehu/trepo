// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "services.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace foo {
namespace bar {

namespace {

const ::google::protobuf::Descriptor* FooReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FooReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FooResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FooResp_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* Foo_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_services_2eproto() {
  protobuf_AddDesc_services_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "services.proto");
  GOOGLE_CHECK(file != NULL);
  FooReq_descriptor_ = file->message_type(0);
  static const int FooReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FooReq, id_),
  };
  FooReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FooReq_descriptor_,
      FooReq::default_instance_,
      FooReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FooReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(FooReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FooReq, _internal_metadata_),
      -1);
  FooResp_descriptor_ = file->message_type(1);
  static const int FooResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FooResp, code_),
  };
  FooResp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FooResp_descriptor_,
      FooResp::default_instance_,
      FooResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FooResp, _has_bits_[0]),
      -1,
      -1,
      sizeof(FooResp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FooResp, _internal_metadata_),
      -1);
  Foo_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_services_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FooReq_descriptor_, &FooReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FooResp_descriptor_, &FooResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_services_2eproto() {
  delete FooReq::default_instance_;
  delete FooReq_reflection_;
  delete FooResp::default_instance_;
  delete FooResp_reflection_;
}

void protobuf_AddDesc_services_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016services.proto\022\007foo.bar\"\024\n\006FooReq\022\n\n\002i"
    "d\030\001 \002(\005\"\027\n\007FooResp\022\014\n\004code\030\001 \002(\0052/\n\003Foo\022"
    "(\n\003Bar\022\017.foo.bar.FooReq\032\020.foo.bar.FooRes"
    "pB\003\200\001\001", 126);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "services.proto", &protobuf_RegisterTypes);
  FooReq::default_instance_ = new FooReq();
  FooResp::default_instance_ = new FooResp();
  FooReq::default_instance_->InitAsDefaultInstance();
  FooResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_services_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_services_2eproto {
  StaticDescriptorInitializer_services_2eproto() {
    protobuf_AddDesc_services_2eproto();
  }
} static_descriptor_initializer_services_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FooReq::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FooReq::FooReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:foo.bar.FooReq)
}

void FooReq::InitAsDefaultInstance() {
}

FooReq::FooReq(const FooReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:foo.bar.FooReq)
}

void FooReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FooReq::~FooReq() {
  // @@protoc_insertion_point(destructor:foo.bar.FooReq)
  SharedDtor();
}

void FooReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FooReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FooReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FooReq_descriptor_;
}

const FooReq& FooReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_services_2eproto();
  return *default_instance_;
}

FooReq* FooReq::default_instance_ = NULL;

FooReq* FooReq::New(::google::protobuf::Arena* arena) const {
  FooReq* n = new FooReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FooReq::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.bar.FooReq)
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FooReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:foo.bar.FooReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:foo.bar.FooReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:foo.bar.FooReq)
  return false;
#undef DO_
}

void FooReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:foo.bar.FooReq)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:foo.bar.FooReq)
}

::google::protobuf::uint8* FooReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.bar.FooReq)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.bar.FooReq)
  return target;
}

int FooReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:foo.bar.FooReq)
  int total_size = 0;

  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FooReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.bar.FooReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FooReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FooReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.bar.FooReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.bar.FooReq)
    MergeFrom(*source);
  }
}

void FooReq::MergeFrom(const FooReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.bar.FooReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FooReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.bar.FooReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FooReq::CopyFrom(const FooReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.bar.FooReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FooReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FooReq::Swap(FooReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FooReq::InternalSwap(FooReq* other) {
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FooReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FooReq_descriptor_;
  metadata.reflection = FooReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FooReq

// required int32 id = 1;
bool FooReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FooReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void FooReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void FooReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 FooReq::id() const {
  // @@protoc_insertion_point(field_get:foo.bar.FooReq.id)
  return id_;
}
 void FooReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:foo.bar.FooReq.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FooResp::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FooResp::FooResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:foo.bar.FooResp)
}

void FooResp::InitAsDefaultInstance() {
}

FooResp::FooResp(const FooResp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:foo.bar.FooResp)
}

void FooResp::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FooResp::~FooResp() {
  // @@protoc_insertion_point(destructor:foo.bar.FooResp)
  SharedDtor();
}

void FooResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FooResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FooResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FooResp_descriptor_;
}

const FooResp& FooResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_services_2eproto();
  return *default_instance_;
}

FooResp* FooResp::default_instance_ = NULL;

FooResp* FooResp::New(::google::protobuf::Arena* arena) const {
  FooResp* n = new FooResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FooResp::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.bar.FooResp)
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FooResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:foo.bar.FooResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:foo.bar.FooResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:foo.bar.FooResp)
  return false;
#undef DO_
}

void FooResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:foo.bar.FooResp)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:foo.bar.FooResp)
}

::google::protobuf::uint8* FooResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.bar.FooResp)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.bar.FooResp)
  return target;
}

int FooResp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:foo.bar.FooResp)
  int total_size = 0;

  // required int32 code = 1;
  if (has_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FooResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.bar.FooResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FooResp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FooResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.bar.FooResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.bar.FooResp)
    MergeFrom(*source);
  }
}

void FooResp::MergeFrom(const FooResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.bar.FooResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FooResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.bar.FooResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FooResp::CopyFrom(const FooResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.bar.FooResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FooResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FooResp::Swap(FooResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FooResp::InternalSwap(FooResp* other) {
  std::swap(code_, other->code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FooResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FooResp_descriptor_;
  metadata.reflection = FooResp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FooResp

// required int32 code = 1;
bool FooResp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FooResp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
void FooResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void FooResp::clear_code() {
  code_ = 0;
  clear_has_code();
}
 ::google::protobuf::int32 FooResp::code() const {
  // @@protoc_insertion_point(field_get:foo.bar.FooResp.code)
  return code_;
}
 void FooResp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:foo.bar.FooResp.code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Foo::~Foo() {}

const ::google::protobuf::ServiceDescriptor* Foo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Foo_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* Foo::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return Foo_descriptor_;
}

void Foo::Bar(::google::protobuf::RpcController* controller,
                         const ::foo::bar::FooReq*,
                         ::foo::bar::FooResp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Bar() not implemented.");
  done->Run();
}

void Foo::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), Foo_descriptor_);
  switch(method->index()) {
    case 0:
      Bar(controller,
             ::google::protobuf::down_cast<const ::foo::bar::FooReq*>(request),
             ::google::protobuf::down_cast< ::foo::bar::FooResp*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Foo::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::foo::bar::FooReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& Foo::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::foo::bar::FooResp::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Foo_Stub::Foo_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Foo_Stub::Foo_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Foo_Stub::~Foo_Stub() {
  if (owns_channel_) delete channel_;
}

void Foo_Stub::Bar(::google::protobuf::RpcController* controller,
                              const ::foo::bar::FooReq* request,
                              ::foo::bar::FooResp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace bar
}  // namespace foo

// @@protoc_insertion_point(global_scope)
